import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import date

# ---------- CONFIG ---------- #
SHEET_NAME = "StockPortfolioApp"
WORKSHEET_NAME = "Sheet1"
JSON_KEYFILE = "gsheets_key.json"

# ---------- AUTH & LOAD GOOGLE SHEET ---------- #
@st.cache_resource
def load_sheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(JSON_KEYFILE, scope)
    client = gspread.authorize(creds)
    worksheet = client.open(SHEET_NAME).worksheet(WORKSHEET_NAME)
    return worksheet

worksheet = load_sheet()

# ---------- FUNCTIONS ---------- #
def load_data():
    try:
        records = worksheet.get_all_records()
        return pd.DataFrame(records)
    except:
        return pd.DataFrame(columns=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô", "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°"])

def save_data(df):
    worksheet.clear()
    worksheet.update([df.columns.values.tolist()] + df.values.tolist())

def summarize_portfolio(df):
    df_buy = df[df["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] == "‡∏ã‡∏∑‡πâ‡∏≠"]
    summary = df_buy.groupby("‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô").agg(
        ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏£‡∏ß‡∏°=("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô", "sum"),
        ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°=("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°", "sum"),
    )
    summary["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"] = summary["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°"] / summary["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏£‡∏ß‡∏°"]
    summary["‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô %"] = (summary["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°"] / summary["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°"].sum()) * 100
    return summary.reset_index()

# ---------- INITIALIZE SESSION ---------- #
if "data" not in st.session_state:
    st.session_state["data"] = load_data()

# ---------- UI ---------- #
st.set_page_config(page_title="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏´‡∏∏‡πâ‡∏ô", layout="wide")
tab = st.sidebar.radio("‡πÄ‡∏°‡∏ô‡∏π", ["üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏û‡∏≠‡∏£‡πå‡∏ï", "üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏∏‡πâ‡∏ô"])

# ---------- PAGE: ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏û‡∏≠‡∏£‡πå‡∏ï ---------- #
if tab == "üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏û‡∏≠‡∏£‡πå‡∏ï":
    st.header("‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏´‡∏∏‡πâ‡∏ô")
    df = st.session_state["data"]

    if df.empty:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï")
    else:
        summary = summarize_portfolio(df)
        total = summary["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°"].sum()

        col1, col2 = st.columns(2)
        with col1:
            fig, ax = plt.subplots()
            ax.pie(summary["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°"], labels=summary["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô"], autopct='%1.1f%%')
            st.pyplot(fig)

        with col2:
            st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô", summary.shape[0])
            st.metric("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï", f"${total:,.2f}")

        st.dataframe(summary, use_container_width=True)

# ---------- PAGE: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ---------- #
elif tab == "üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£":
    st.header("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô")

    with st.form("form_add"):
        col1, col2, col3 = st.columns(3)
        with col1:
            stock = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô AAPL)").upper()
        with col2:
            qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", min_value=1)
        with col3:
            price = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô", min_value=0.01)

        col4, col5 = st.columns(2)
        with col4:
            ttype = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", ["‡∏ã‡∏∑‡πâ‡∏≠", "‡∏Ç‡∏≤‡∏¢"])
        with col5:
            tdate = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=date.today())

        submitted = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        if submitted and stock:
            total = qty * price
            new_row = {"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": str(tdate), "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô": stock, "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": ttype,
                       "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô": qty, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô": price, "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°": total}
            df = st.session_state["data"].append(new_row, ignore_index=True)
            st.session_state["data"] = df
            save_data(df)
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

    st.subheader("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    st.dataframe(st.session_state["data"], use_container_width=True)

# ---------- PAGE: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏∏‡πâ‡∏ô ---------- #
elif tab == "üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏∏‡πâ‡∏ô":
    st.header("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏£‡∏≤‡∏¢‡∏ï‡∏±‡∏ß")
    search = st.text_input("‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô AAPL)").upper()
    df = st.session_state["data"]

    if search:
        filtered = df[df["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô"] == search]
        if filtered.empty:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏ô‡∏µ‡πâ")
        else:
            summary = summarize_portfolio(filtered)
            st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", int(summary['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏£‡∏ß‡∏°'].iloc[0]))
            st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"${summary['‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'].iloc[0]:.2f}")
            st.metric("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°", f"${summary['‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°'].iloc[0]:.2f}")
            st.metric("‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï", f"{summary['‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô %'].iloc[0]:.2f}%")

            st.subheader("‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            st.dataframe(filtered, use_container_width=True)
